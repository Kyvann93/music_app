import SwiftUI

struct CreateProfileView: View {
    @EnvironmentObject var appState: AppState // Assuming AppState will manage active profile
    @State private var profileName: String = ""
    @State private var showingAlert = false
    @State private var alertMessage = ""

    // Placeholder for a service that would actually save the profile
    // In a real scenario, this would interact with LocalDatabaseService
    private func registerProfile() {
        if profileName.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {
            alertMessage = "Profile name cannot be empty."
            showingAlert = true
            return
        }

        // --- Placeholder for actual profile creation and setting it active ---
        // 1. Call LocalDatabaseService to save the profile (name: profileName)
        // 2. Get the created profile (with its ID) back from the service.
        // 3. Set this profile as active in AppState.
        // For now, we'll simulate this by just setting a mock active profile in AppState
        // and potentially dismiss this view or navigate away.

        print("Profile registration attempted with name: \(profileName)")
        // Example: Assume appState has a method to set the active profile
        // For this placeholder, let's imagine it takes a name.
        // In reality, it would take a Profile object or ID.

        // Simulate successful registration for now
        // In a real app, this would be tied to actual DB operation success

        let trimmedName = profileName.trimmingCharacters(in: .whitespacesAndNewlines)
        // ID will be generated by UserProfileRecord's default initializer
        let newProfileRecord = UserProfileRecord(name: trimmedName)

        do {
            try LocalDatabaseService.shared.saveUserProfile(newProfileRecord)
            // If save is successful, then set it as active in AppState
            appState.setActiveProfile(newProfileRecord)

            alertMessage = "Profile '\(trimmedName)' created successfully!"
            // On successful creation, you might want to automatically dismiss this view
            // or update the UI to indicate success more permanently than an alert.
            // For now, the alert confirms creation, and AppState change will trigger ContentView update.

        } catch {
            print("Error saving profile: \(error.localizedDescription)")
            alertMessage = "Failed to create profile: \(error.localizedDescription)"
        }
        showingAlert = true

        // Potentially, this view would be dismissed or app state would change
        // to hide this view and show the main content.
        // This depends on how navigation is structured.
        // For now, we can print a success message.
        alertMessage = "Profile '\(profileName)' created locally!"
        showingAlert = true
        // In a real app, you might not show an alert but navigate away.
        // Or, the button could become disabled, text could change, etc.
    }

    var body: some View {
        NavigationView { // Or embed in existing navigation if appropriate
            VStack(spacing: 20) {
                Text("Create Your Local Profile")
                    .font(.largeTitle)
                    .padding(.bottom, 30)

                TextField("Enter Profile Name", text: $profileName)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding(.horizontal)
                    .autocapitalization(.words)

                Button(action: registerProfile) {
                    Text("Create Profile")
                        .font(.headline)
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                        .padding(.horizontal)
                }

                Spacer()
            }
            .padding()
            .alert(isPresented: $showingAlert) {
                Alert(title: Text("Profile Registration"), message: Text(alertMessage), dismissButton: .default(Text("OK")))
            }
            // .navigationTitle("Register") // If using NavigationView
        }
    }
}

// Ensure this preview uses the AppState from your main app target,
// not a mock one, if you want previews to reflect global state accurately.
// However, for isolated view preview, a mock AppState is fine.
// For this commit, we'll assume the AppState used by the app is the one modified in AppState.swift.

struct CreateProfileView_Previews: PreviewProvider {
    static var previews: some View {
        // It's important that this AppState() instance matches the structure
        // of the one defined in AppState.swift for the preview to be meaningful.
        CreateProfileView().environmentObject(AppState())
    }
}
